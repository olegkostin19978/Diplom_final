{"name": "Тест открытия страницы акций", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/promotions\" itemprop=\"url\" class=\"header-bottom__link\">...</a> is not clickable at point (165, 166). Other element would receive the click: <div class=\"button change-city__button change-city__button--cancel light-blue\" tag=\"button\">...</div>\n  (Session info: chrome=128.0.6613.85)\nStacktrace:\n\tGetHandleVerifier [0x00D2D933+25811]\n\t(No symbol) [0x00CBE314]\n\t(No symbol) [0x00BB2523]\n\t(No symbol) [0x00BFD397]\n\t(No symbol) [0x00BFB799]\n\t(No symbol) [0x00BF967B]\n\t(No symbol) [0x00BF8C7B]\n\t(No symbol) [0x00BED9DF]\n\t(No symbol) [0x00C1AD2C]\n\t(No symbol) [0x00BED475]\n\t(No symbol) [0x00C1AFC4]\n\t(No symbol) [0x00C346F0]\n\t(No symbol) [0x00C1AAC6]\n\t(No symbol) [0x00BEBEFD]\n\t(No symbol) [0x00BEC8FD]\n\tGetHandleVerifier [0x00FFF143+2981091]\n\tGetHandleVerifier [0x01052FF9+3324825]\n\tGetHandleVerifier [0x00DBB32F+605903]\n\tGetHandleVerifier [0x00DC2CBC+637020]\n\t(No symbol) [0x00CC6F4D]\n\t(No symbol) [0x00CC3DD8]\n\t(No symbol) [0x00CC3F75]\n\t(No symbol) [0x00CB6406]\n\tBaseThreadInitThunk [0x75A8FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x770180CE+286]\n\tRtlGetAppContainerNamedObjectPath [0x7701809E+238]", "trace": "@pytest.mark.ui_test\n    @allure.title(\"Тест открытия страницы акций\")\n    @allure.description(\"Проверка, что текст заголовка страницы акций соответствует ожидаемому.\")\n    @allure.feature(\"Проверка страниц\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_open_promotions_page():\n        \"\"\"Тест для открытия страницы акций и проверки заголовка.\"\"\"\n        browser = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n        try:\n            main_page = MainPage(browser)\n>           main_page.open_promotions()\n\ntest\\ui_test.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nweb_pages\\MainPage.py:44: in open_promotions\n    promotions_button.click()\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B8D87D3620>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x770180CE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7701809E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/promotions\" itemprop=\"url\" class=\"header-bottom__link\">...</a> is not clickable at point (165, 166). Other element would receive the click: <div class=\"button change-city__button change-city__button--cancel light-blue\" tag=\"button\">...</div>\nE         (Session info: chrome=128.0.6613.85)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00D2D933+25811]\nE       \t(No symbol) [0x00CBE314]\nE       \t(No symbol) [0x00BB2523]\nE       \t(No symbol) [0x00BFD397]\nE       \t(No symbol) [0x00BFB799]\nE       \t(No symbol) [0x00BF967B]\nE       \t(No symbol) [0x00BF8C7B]\nE       \t(No symbol) [0x00BED9DF]\nE       \t(No symbol) [0x00C1AD2C]\nE       \t(No symbol) [0x00BED475]\nE       \t(No symbol) [0x00C1AFC4]\nE       \t(No symbol) [0x00C346F0]\nE       \t(No symbol) [0x00C1AAC6]\nE       \t(No symbol) [0x00BEBEFD]\nE       \t(No symbol) [0x00BEC8FD]\nE       \tGetHandleVerifier [0x00FFF143+2981091]\nE       \tGetHandleVerifier [0x01052FF9+3324825]\nE       \tGetHandleVerifier [0x00DBB32F+605903]\nE       \tGetHandleVerifier [0x00DC2CBC+637020]\nE       \t(No symbol) [0x00CC6F4D]\nE       \t(No symbol) [0x00CC3DD8]\nE       \t(No symbol) [0x00CC3F75]\nE       \t(No symbol) [0x00CB6406]\nE       \tBaseThreadInitThunk [0x75A8FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x770180CE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7701809E+238]\n\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "Проверка, что текст заголовка страницы акций соответствует ожидаемому.", "steps": [{"name": "Открыть страницу акций", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/promotions\" itemprop=\"url\" class=\"header-bottom__link\">...</a> is not clickable at point (165, 166). Other element would receive the click: <div class=\"button change-city__button change-city__button--cancel light-blue\" tag=\"button\">...</div>\n  (Session info: chrome=128.0.6613.85)\nStacktrace:\n\tGetHandleVerifier [0x00D2D933+25811]\n\t(No symbol) [0x00CBE314]\n\t(No symbol) [0x00BB2523]\n\t(No symbol) [0x00BFD397]\n\t(No symbol) [0x00BFB799]\n\t(No symbol) [0x00BF967B]\n\t(No symbol) [0x00BF8C7B]\n\t(No symbol) [0x00BED9DF]\n\t(No symbol) [0x00C1AD2C]\n\t(No symbol) [0x00BED475]\n\t(No symbol) [0x00C1AFC4]\n\t(No symbol) [0x00C346F0]\n\t(No symbol) [0x00C1AAC6]\n\t(No symbol) [0x00BEBEFD]\n\t(No symbol) [0x00BEC8FD]\n\tGetHandleVerifier [0x00FFF143+2981091]\n\tGetHandleVerifier [0x01052FF9+3324825]\n\tGetHandleVerifier [0x00DBB32F+605903]\n\tGetHandleVerifier [0x00DC2CBC+637020]\n\t(No symbol) [0x00CC6F4D]\n\t(No symbol) [0x00CC3DD8]\n\t(No symbol) [0x00CC3F75]\n\t(No symbol) [0x00CB6406]\n\tBaseThreadInitThunk [0x75A8FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x770180CE+286]\n\tRtlGetAppContainerNamedObjectPath [0x7701809E+238]\n\n", "trace": "  File \"C:\\Users\\kosty\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\kosty\\Diplom_final\\web_pages\\MainPage.py\", line 44, in open_promotions\n    promotions_button.click()\n  File \"C:\\Users\\kosty\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\kosty\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\kosty\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\kosty\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1726588506221, "stop": 1726588507732}], "start": 1726588436400, "stop": 1726588515336, "uuid": "9a2f9627-a8c1-4206-9f63-4e2b24af8833", "historyId": "2d9d1fa8331f5024c32aed39a38bb060", "testCaseId": "2d9d1fa8331f5024c32aed39a38bb060", "fullName": "test.ui_test#test_open_promotions_page", "labels": [{"name": "feature", "value": "Проверка страниц"}, {"name": "severity", "value": "normal"}, {"name": "tag", "value": "ui_test"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "ui_test"}, {"name": "host", "value": "LAPTOP-5784VNEL"}, {"name": "thread", "value": "12376-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.ui_test"}]}